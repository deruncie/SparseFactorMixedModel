// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "BSFG_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// LDLt_sparse
List LDLt_sparse(MSpMat A);
RcppExport SEXP _BSFG_LDLt_sparse(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LDLt_sparse(A));
    return rcpp_result_gen;
END_RCPP
}
// LDLt_notSparse
List LDLt_notSparse(Map<MatrixXd> A);
RcppExport SEXP _BSFG_LDLt_notSparse(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(LDLt_notSparse(A));
    return rcpp_result_gen;
END_RCPP
}
// SxD
MatrixXd SxD(MSpMat X, Map<MatrixXd> Y);
RcppExport SEXP _BSFG_SxD(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(SxD(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// SxS
MatrixXd SxS(MSpMat X, MSpMat Y);
RcppExport SEXP _BSFG_SxS(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type X(XSEXP);
    Rcpp::traits::input_parameter< MSpMat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(SxS(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// rstdnorm_mat
MatrixXd rstdnorm_mat(int n, int p);
RcppExport SEXP _BSFG_rstdnorm_mat(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(rstdnorm_mat(n, p));
    return rcpp_result_gen;
END_RCPP
}
// find_candidate_states
VectorXd find_candidate_states(MatrixXd h2s_matrix, double step_size, int old_state);
RcppExport SEXP _BSFG_find_candidate_states(SEXP h2s_matrixSEXP, SEXP step_sizeSEXP, SEXP old_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type h2s_matrix(h2s_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type old_state(old_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(find_candidate_states(h2s_matrix, step_size, old_state));
    return rcpp_result_gen;
END_RCPP
}
// sample_MME_single_diagK
VectorXd sample_MME_single_diagK(VectorXd y, MatrixXd X, VectorXd prior_mean, VectorXd prior_prec, MSpMat chol_R, double tot_Eta_prec, VectorXd randn_theta, VectorXd randn_e);
RcppExport SEXP _BSFG_sample_MME_single_diagK(SEXP ySEXP, SEXP XSEXP, SEXP prior_meanSEXP, SEXP prior_precSEXP, SEXP chol_RSEXP, SEXP tot_Eta_precSEXP, SEXP randn_thetaSEXP, SEXP randn_eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type prior_prec(prior_precSEXP);
    Rcpp::traits::input_parameter< MSpMat >::type chol_R(chol_RSEXP);
    Rcpp::traits::input_parameter< double >::type tot_Eta_prec(tot_Eta_precSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type randn_theta(randn_thetaSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type randn_e(randn_eSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_MME_single_diagK(y, X, prior_mean, prior_prec, chol_R, tot_Eta_prec, randn_theta, randn_e));
    return rcpp_result_gen;
END_RCPP
}
// sample_MME_fixedEffects_c
MatrixXd sample_MME_fixedEffects_c(Map<MatrixXd> Y, Map<MatrixXd> X, Rcpp::List Sigma_Choleskys, VectorXi h2s_index, Map<VectorXd> tot_Eta_prec, Map<MatrixXd> prior_mean, Map<MatrixXd> prior_prec, int grainSize);
RcppExport SEXP _BSFG_sample_MME_fixedEffects_c(SEXP YSEXP, SEXP XSEXP, SEXP Sigma_CholeskysSEXP, SEXP h2s_indexSEXP, SEXP tot_Eta_precSEXP, SEXP prior_meanSEXP, SEXP prior_precSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma_Choleskys(Sigma_CholeskysSEXP);
    Rcpp::traits::input_parameter< VectorXi >::type h2s_index(h2s_indexSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type tot_Eta_prec(tot_Eta_precSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type prior_prec(prior_precSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_MME_fixedEffects_c(Y, X, Sigma_Choleskys, h2s_index, tot_Eta_prec, prior_mean, prior_prec, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_MME_fixedEffects_cis_c
Rcpp::List sample_MME_fixedEffects_cis_c(Map<MatrixXd> Y, Map<MatrixXd> X, Rcpp::List cis_genotypes, Rcpp::List Sigma_Choleskys, VectorXi h2s_index, Map<VectorXd> tot_Eta_prec, Map<MatrixXd> prior_mean, Map<MatrixXd> prior_prec, Map<VectorXd> cis_effect_index, int total_cis_effects, int grainSize);
RcppExport SEXP _BSFG_sample_MME_fixedEffects_cis_c(SEXP YSEXP, SEXP XSEXP, SEXP cis_genotypesSEXP, SEXP Sigma_CholeskysSEXP, SEXP h2s_indexSEXP, SEXP tot_Eta_precSEXP, SEXP prior_meanSEXP, SEXP prior_precSEXP, SEXP cis_effect_indexSEXP, SEXP total_cis_effectsSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cis_genotypes(cis_genotypesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma_Choleskys(Sigma_CholeskysSEXP);
    Rcpp::traits::input_parameter< VectorXi >::type h2s_index(h2s_indexSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type tot_Eta_prec(tot_Eta_precSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type prior_prec(prior_precSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type cis_effect_index(cis_effect_indexSEXP);
    Rcpp::traits::input_parameter< int >::type total_cis_effects(total_cis_effectsSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_MME_fixedEffects_cis_c(Y, X, cis_genotypes, Sigma_Choleskys, h2s_index, tot_Eta_prec, prior_mean, prior_prec, cis_effect_index, total_cis_effects, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_coefs_set_c
MatrixXd sample_coefs_set_c(Rcpp::List model_matrices, Map<VectorXd> tot_Y_prec, Map<MatrixXd> prior_mean, Map<MatrixXd> prior_prec, int grainSize);
RcppExport SEXP _BSFG_sample_coefs_set_c(SEXP model_matricesSEXP, SEXP tot_Y_precSEXP, SEXP prior_meanSEXP, SEXP prior_precSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type model_matrices(model_matricesSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type tot_Y_prec(tot_Y_precSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type prior_prec(prior_precSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coefs_set_c(model_matrices, tot_Y_prec, prior_mean, prior_prec, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// get_fitted_set_c
MatrixXd get_fitted_set_c(Rcpp::List model_matrices, Map<MatrixXd> coefs, int grainSize);
RcppExport SEXP _BSFG_get_fitted_set_c(SEXP model_matricesSEXP, SEXP coefsSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type model_matrices(model_matricesSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fitted_set_c(model_matrices, coefs, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_MME_single_diagR
VectorXd sample_MME_single_diagR(VectorXd y, SpMat Zt, MSpMat& chol_C, double tot_Eta_prec, double pe, VectorXd randn_theta);
RcppExport SEXP _BSFG_sample_MME_single_diagR(SEXP ySEXP, SEXP ZtSEXP, SEXP chol_CSEXP, SEXP tot_Eta_precSEXP, SEXP peSEXP, SEXP randn_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< SpMat >::type Zt(ZtSEXP);
    Rcpp::traits::input_parameter< MSpMat& >::type chol_C(chol_CSEXP);
    Rcpp::traits::input_parameter< double >::type tot_Eta_prec(tot_Eta_precSEXP);
    Rcpp::traits::input_parameter< double >::type pe(peSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type randn_theta(randn_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_MME_single_diagR(y, Zt, chol_C, tot_Eta_prec, pe, randn_theta));
    return rcpp_result_gen;
END_RCPP
}
// sample_MME_ZKZts_c
MatrixXd sample_MME_ZKZts_c(Map<MatrixXd> Y, MSpMat Z, Map<VectorXd> tot_Eta_prec, Rcpp::List randomEffect_C_Choleskys, Map<MatrixXd> h2s, VectorXi h2s_index, int grainSize);
RcppExport SEXP _BSFG_sample_MME_ZKZts_c(SEXP YSEXP, SEXP ZSEXP, SEXP tot_Eta_precSEXP, SEXP randomEffect_C_CholeskysSEXP, SEXP h2sSEXP, SEXP h2s_indexSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< MSpMat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type tot_Eta_prec(tot_Eta_precSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type randomEffect_C_Choleskys(randomEffect_C_CholeskysSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type h2s(h2sSEXP);
    Rcpp::traits::input_parameter< VectorXi >::type h2s_index(h2s_indexSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_MME_ZKZts_c(Y, Z, tot_Eta_prec, randomEffect_C_Choleskys, h2s, h2s_index, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// tot_prec_scores
VectorXd tot_prec_scores(Map<MatrixXd> Y, Rcpp::List Sigma_Choleskys, VectorXi h2s_index, int grainSize);
RcppExport SEXP _BSFG_tot_prec_scores(SEXP YSEXP, SEXP Sigma_CholeskysSEXP, SEXP h2s_indexSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma_Choleskys(Sigma_CholeskysSEXP);
    Rcpp::traits::input_parameter< VectorXi >::type h2s_index(h2s_indexSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(tot_prec_scores(Y, Sigma_Choleskys, h2s_index, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// log_p_h2s
MatrixXd log_p_h2s(Map<MatrixXd> Y, Map<VectorXd> tot_Eta_prec, Rcpp::List Sigma_Choleskys, Map<VectorXd> discrete_priors, int grainSize);
RcppExport SEXP _BSFG_log_p_h2s(SEXP YSEXP, SEXP tot_Eta_precSEXP, SEXP Sigma_CholeskysSEXP, SEXP discrete_priorsSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type tot_Eta_prec(tot_Eta_precSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma_Choleskys(Sigma_CholeskysSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type discrete_priors(discrete_priorsSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(log_p_h2s(Y, tot_Eta_prec, Sigma_Choleskys, discrete_priors, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_h2s
VectorXi sample_h2s(Map<ArrayXXd> log_ps, int grainSize);
RcppExport SEXP _BSFG_sample_h2s(SEXP log_psSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<ArrayXXd> >::type log_ps(log_psSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_h2s(log_ps, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_h2s_discrete_MH_c
VectorXi sample_h2s_discrete_MH_c(Map<MatrixXd> Y, Map<VectorXd> tot_Eta_prec, Map<VectorXd> discrete_priors, VectorXi h2s_index, Map<MatrixXd> h2s_matrix, Rcpp::List Sigma_Choleskys, double step_size, int grainSize);
RcppExport SEXP _BSFG_sample_h2s_discrete_MH_c(SEXP YSEXP, SEXP tot_Eta_precSEXP, SEXP discrete_priorsSEXP, SEXP h2s_indexSEXP, SEXP h2s_matrixSEXP, SEXP Sigma_CholeskysSEXP, SEXP step_sizeSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type tot_Eta_prec(tot_Eta_precSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type discrete_priors(discrete_priorsSEXP);
    Rcpp::traits::input_parameter< VectorXi >::type h2s_index(h2s_indexSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type h2s_matrix(h2s_matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma_Choleskys(Sigma_CholeskysSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_h2s_discrete_MH_c(Y, tot_Eta_prec, discrete_priors, h2s_index, h2s_matrix, Sigma_Choleskys, step_size, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_factors_scores_c
MatrixXd sample_factors_scores_c(Map<MatrixXd> Eta_tilde, Map<MatrixXd> prior_mean, Map<MatrixXd> Lambda, Map<VectorXd> resid_Eta_prec, Map<VectorXd> F_e_prec);
RcppExport SEXP _BSFG_sample_factors_scores_c(SEXP Eta_tildeSEXP, SEXP prior_meanSEXP, SEXP LambdaSEXP, SEXP resid_Eta_precSEXP, SEXP F_e_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Eta_tilde(Eta_tildeSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type resid_Eta_prec(resid_Eta_precSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type F_e_prec(F_e_precSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_factors_scores_c(Eta_tilde, prior_mean, Lambda, resid_Eta_prec, F_e_prec));
    return rcpp_result_gen;
END_RCPP
}
// sample_delta_c_Eigen
VectorXd sample_delta_c_Eigen(VectorXd delta, VectorXd tauh, Map<VectorXd> scores, double delta_1_rate, double delta_2_rate, Map<MatrixXd> randg_draws);
RcppExport SEXP _BSFG_sample_delta_c_Eigen(SEXP deltaSEXP, SEXP tauhSEXP, SEXP scoresSEXP, SEXP delta_1_rateSEXP, SEXP delta_2_rateSEXP, SEXP randg_drawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VectorXd >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type tauh(tauhSEXP);
    Rcpp::traits::input_parameter< Map<VectorXd> >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< double >::type delta_1_rate(delta_1_rateSEXP);
    Rcpp::traits::input_parameter< double >::type delta_2_rate(delta_2_rateSEXP);
    Rcpp::traits::input_parameter< Map<MatrixXd> >::type randg_draws(randg_drawsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_delta_c_Eigen(delta, tauh, scores, delta_1_rate, delta_2_rate, randg_draws));
    return rcpp_result_gen;
END_RCPP
}
// rgig_multiple
NumericVector rgig_multiple(int n, NumericVector lambda, NumericVector chi, NumericVector psi);
RcppExport SEXP _BSFG_rgig_multiple(SEXP nSEXP, SEXP lambdaSEXP, SEXP chiSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chi(chiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(rgig_multiple(n, lambda, chi, psi));
    return rcpp_result_gen;
END_RCPP
}
